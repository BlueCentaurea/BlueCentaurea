<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="contextMenuStripData01.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEE
        AAkRIwoXHEQhKRlXcDIYWX4xEkxuKAopPBcBBAcIAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIEwQAAAAABR9D
        FyYxaSdlN3Ytmjt/McU8gzbfL5KY5yaa0+clls3dJJHHxSKIu5keeKZiEktqJQAAAAUEFiEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiBH
        GSQ1cix+PYQ01EGOOvtDkz7/RJZA/0WYP/89nGb/Ja7W/yKv5f8krOL/Jajf/yai2fokl83SIIS0fRNS
        cSQAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIWAAEG
        AAcvaCdSPYU2x0OSPf1FmUL/RZ5E/0aiRv9GpUf/R6ZH/0akRv8usaH/Gb7w/xu87f8duev/H7Xo/yKv
        5P8kp979I5nNxxt4o1EABgoHDkpoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADmE
        MAAKGQcKNHQubEGPPOlFmkL/RqFG/0emR/9Hqkj/SK1J/0ivSv9IsEr/SK5H/0CuXv8bw9r/Esj3/xXF
        8/8XwvH/Gr7v/x246v8hseX/I6TZ6B6EsWgFGiUKHY/EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAaPxYAAAAABjV4MWxClD/vRp9F/0emR/9HrEn/SLBK/0iyS/9JtEv/SbVM/0m2TP9JtUv/SK5G/y65
        kv8Nzvj/Ds35/xDL+P8SyPX/FsTy/xq+7/8et+r/Iqre7x2JtWcAAAAGDEZgAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEzcy9QQpVA6UaiRv9Hqkj/SK9K/0izS/9JtUz/SbdM/0m3TP9JuE3/SbhN/0m4
        Tf9IsUn/Qq1R/xnGy/8J0v7/C9D7/w3P+v8PzPj/E8f1/xfC8f8cuuz/IKzf6BmGsE8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVyFIAJVcjIUCTP8VGo0f/R6tJ/0ixSv9JtUv/SbdM/0m4TP9JuE3/SbhN/0m4
        Tf9IuEz/R7hL/0azSP9FqUL/M7F6/wzP8/8J0v3/CtH7/wvQ+/8Nzvn/Ecr3/xbD8v8bu+3/HanaxRFm
        hyAl4v8AAAAAAAAAAAAAAAAACBUIAAAAAAM7iTp9RqJG/kerSf9IsUv/SbVM/0m3TP9JuE3/SbhN/0m4
        Tf9HuEv/TLlQ/2C/Zf9vw3T/b8Fz/16zX/9GpUj/Hb60/wjT//8J0vz/CdL8/wrR+/8Mz/r/EMv3/xXE
        8/8buuz+GZ3LeQAAAAIDGCAAAAAAAAAAAABFpEQAJ14nIEKbQtBHqkj/SLFK/0m1TP9Jt0z/SbhN/0m4
        Tf9JuE3/SLhM/2zCcP+ozqb/w8Oq/8Ozl//EtJj/xcWt/6fHoP9cuIv/Dszn/wjS/f8J0vz/CdL8/wrR
        +/8Mz/r/EMr3/xbD8v8Zs+PPD22NIBm78AAAAAAAAAAAALn/uQA5hzleRqZH+kiwSv9JtUz/SbdM/0m4
        Tf9JuE3/SbhN/0i4TP9+x4H/xsew/7qTaP+lbiz/oGUe/6BlHv+mby7/vZZs/8nIsv9Z0Nb/CNL8/wnS
        /P8J0vz/CdL8/wrR+/8Nz/r/Esn2/xe/7/oVncdbP///AAAAAAAFDgUAAAAABECZQZpIrEn/SbNL/0m3
        TP9JuE3/SbhN/0m4Tf9HuEv/bsNy/8nJsv+1gkf/qWod/6xtIf+tbyP/rW8j/6xtIf+pah3/uIVJ/8fS
        yf872Pn/BtL8/wnS/P8J0vz/CdL8/wvR+/8Ozfn/FMb0/xWv25MAAAAEABAVACRbJAAaQRoQQ6FEwEix
        Sv9Jtkz/SbhN/0m4Tf9JuE3/SbhN/0u4UP+s0Kv/yJ5w/7NyJP+3dir/uXgs/7p5Lf+6eS3/uXgs/7d3
        Kv+zciX/zaR1/5Xg7v8M0vz/CdL8/wnS/P8J0vz/CdL8/wzQ+v8Ry/f/E7rnwAdOYxAJZ4IAOJA4ACtt
        KyBEp0baSbNL/0m3TP9JuE3/SbhN/0m4Tf9IuEv/V6Vz/8nEvP/AhUH/vXsw/8B+NP/Bfzb/wn83/8J/
        N//Bfzb/wH40/717MP/ChkL/y9jR/yjX+/8H0vz/CdL8/wnS/P8J0vz/CtH7/w7O+f8Rwe3aCoGiIAyl
        zwBCpUQAM300KEasSOVJtUz/SbhM/0m4Tf9JuE3/SblN/0OqU/9Xc6n/1cG2/8ODO//DgTr/xYM+/8WE
        Qf/GhUL/xoVC/8WEQf/Fgz7/w4E6/8SDPf/b0sH/Qdr7/wbS/P8J0vz/CdL8/wnS/P8K0vz/DM/6/xDG
        8uUNkrUoELvnAEOmRAA0gDUoRq5J5Em2TP9JuE3/SbhN/0m4Tf9Kukz/MXB7/01Myv/Yxrn/x4dE/8eH
        Rf/Iikn/yoxM/8qNTv/KjU7/yoxM/8mKSv/Hh0X/x4hG/93Uxf9B2/z/BtL8/wnS/P8J0vz/CdL8/wnS
        /P8L0fv/Dsj05AuWuScOvekAOJY6AC55LyBFrUjbSbdM/0m4Tf9JuE3/SblM/0OjXP8hMK//OjXQ/8/E
        z//Ollv/yo1O/8yRVP/Ok1j/z5Va/8+VWv/Ok1j/zJFU/8qNTv/Ql17/0N/b/yfX/P8H0vz/CdL8/wnS
        /P8J0vz/CdL8/wvR+/8MyPPbBo6wHwar1AAnZykAH1IhDkWsSL5Jt0z/SbhN/0m4Tf9JuE3/MmOP/x8a
        zf8lIdP/paPk/966kf/Nklb/0Jhe/9KbYv/TnWT/051k/9KbYv/QmF7/zZJW/+K+m/+a5vb/DNL8/wnS
        /P8J0vz/CdL8/wnS/P8J0vz/CtL8/wvG8L4EYnkOBXWQAAcVCAAAAAACRKpGl0m3TP9JuE3/SbpL/0CX
        aP8kK8L/Ih3U/yMf2/9VUeT/2M/b/9yxhP/UnWT/1qJq/9ilbv/YpW7/16Jq/9SdZP/ftIr/2Obk/zzZ
        +v8G0fz/CdL8/wnS/P8J0vz/CdL8/wnS/P8K0fv/CsLqkAAAAAIAGR8AAAAAAGf/awA/oUFcSLZL+km4
        Tf9ItFD/L1Si/yIc1f8mIdv/JyLf/yYh3/9saef/2tPf/+jKp//gtYT/3rF9/96xfv/gtYX/6cqq/9nn
        5v9b1PP/D8bz/w7J9f8Mzfj/C8/5/wrR+/8J0vz/CdP8/wnQ+voIuuBZDv//AAAAAAAAAAAAP6RBADOG
        NRtGsknPSrpL/zyGeP8kJM7/JSDb/yci3/8nI9//JyPf/ycj3/9WU+X/qKft/9XQ4//l29n/5tzZ/9ff
        5f+l2PD/R7/r/xa06f8Vt+v/FLns/xO77v8SvfD/EcDy/w/D9P8Nxvf/C8XyzgSdvRsFvOMAAAAAAAAA
        AAARMBEA////AEOrRHZFq1b9LEOz/yUf3f8oJOD/KSXg/yon4P8rKeH/LCrh/yop4f8vLuL/RUbl/1xd
        6P9bXuj/Q1Xl/ytN4v8lSuL/Jkri/yVJ4v8kSeL/I0ji/yJJ4v8iSeP/Ikrj/yFL4/0aV9ZyoDv/AAA3
        QwAAAAAAAAAAAAAAAAA/pUIAOqAlGTJgksEnJdn/Kibg/ysp4f8tLOH/Li7i/zAx4v8xMuP/MjTj/zI1
        4/8xNOP/MDLj/y8y4/8wMeP/MDDi/y8u4v8uK+H/LCnh/ysm4P8pI+D/KCHf/ycg3/8nIN//JR3YwBwP
        rBkgE8cAAAAAAAAAAAAAAAAAAAAAAAAAAAAsKf8AHxrHRykn3ectLOH/LzDi/zEz4/8zNuP/NTnk/zY7
        5P83PeX/OD7l/zg+5f84PuX/OD3l/zc85f82OuT/NDjk/zI14/8wMuL/Ly/i/y0s4f8qKOH/KSXg/yYh
        3OYfG8dGKiT/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEQdwAAAAABKCjQZTAx4O4zNuT/NTrk/zg+
        5f86Qeb/PEPm/z1G5/8+R+f/P0jn/z9I5/8+R+f/PUXn/zxD5v86QOb/Nz3l/zU65P8zNuP/MDLi/y4u
        4v8qKd/tJCDOYAAAAAEPDHYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwelwAOD2wELTDTZTU6
        4uc6Qeb/PUXn/z9J6P9CTOj/RE/p/0VR6v9GUur/RlLq/0VR6v9ET+n/Qkzo/z9J6P89Ref/OkHl/zc8
        5f80OOT/MDHg5igo0GEKCGMEGBeWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsf
        iQAAADICMTfPRjtE4cFBS+j8RVDq/0hU6v9KWOv/TFrs/01c7P9NXOz/TFrs/0pY6/9IVOv/RVDp/0JM
        6P8+R+f/OkHl/DU638AsL81EAAAqAhgZiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABOW/8AMTm7GD9K3HRGU+bOTFrr+lBg7f9TZO7/VWbv/1Vm7/9UZO7/UWHt/05c
        7P9KV+v/RVHp+UBK5Mw4QNp0KzG6F0VO/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbImsAAAAAADpGwBlIVtxYUGDmlFVm6rxWaOzZWGnt41dp
        7eNUZevYTl7nvElX45RBTdpWND28FwAAAAAXHWkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAqZgAbJFwBOUajCkVU
        xxtMW9AjTFzQIkRTxRo1QaEKFh5bARwlZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////gB///gAH//gAAf/wAAD/4AAAf8AAAD+AAAAfgAAAHwAAAA8AA
        AAPAAAADgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAADwAAAA+AAAAfgAAAH8AAAD/AA
        AA/4AAAf/AAAP/8AAP//gAH///AP//////8=
</value>
  </data>
</root>