<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAD0yqf/882m/+/Opf/n0KL/586j/+vMpf/szKX/6cmj/+TCov/lwqT/5MKm/97Bof/ZuqH/27yk/9a9
        ov/VvaL/17Sg/9CqnP/Qq53/2LGh/8ylmP/KrZz/38ej//TLp//yyqf/8cqn//HKp//wyqf/8Mqn//DK
        p//wyqf/8Mqn/+TLpP/UwJ3/0bid/860m//Nq5n/0aib/8+nl//Rp5n/zp6W/8ydkf/Ono3/zZ6K/82c
        iv/Mmov/y5qQ/8+ajf/NmYn/zpqJ/8qaf//LmXb/yJd4/8uah//Qopb/48Sl/+7Mp//xyqf/8Mqn//DK
        p//wyqf/8Mqn//DKp//wyqf/zK2b/8mXjv/FmYD/wJV8/7qTdf+1lm//spJt/6+Lbv+vjW7/p4No/6eA
        Z/+ngGX/onpl/59zY/+cc1//nHNl/5ZyZP+YcmH/lnBd/5RuY/+OcGH/n35l/8GQdv/MrZH/6M+l//TJ
        qP/vyqf/8Mqn//DKp//wyqf/8Mqn//DKp/+7lnv/pZtl/52VZP+UdGD/l2xm/5ZrZv+UamT/kWZk/5dk
        Zv+KYmf/e2Jj/3NhZP9pXmD/aGNL/11YWf9cV1n/X1tS/2JcR/9jYTz/WVpM/1hYUv9oX0b/jm5e/8ad
        gv/exaT/78um//DKp//wyqf/8Mqn//DKp//wyqf/8Mqn/5qZY/+XmmX/mIZk/5psaP+ZZGX/mmVo/5pk
        aP+eZ2b/iWZn/3BoY/9kZVL/YGFV/2FkQP9eXz//U1JU/1NTU/9WV0v/V1hI/1dZSv9aWU7/V1FR/1ZY
        UP9cWlL/sIhu/9++ov/ozaL/7smn//DKp//wyqf/8Mqn//DKp//wyqf/l51k/5iJYv+bdWj/l2dm/5dm
        Zv+aZ2X/k2dm/31nZ/9xY2j/XGBk/2JhU/9dXkP/WFdJ/1ZRTf9YSUv/VEpK/05HSP9LSEr/UkJD/2Q8
        PP9cPT7/UU1O/1FTUP+TdF//0rOV/+LPov/zyaX/78mm/+/Jpv/vyab/78mm/+/Jpv+dk2v/m3Vl/5pk
        Zv+ZZ2X/nGZm/5lmaP+CZWP/amRd/2JjVv9bXFD/W1BH/11IRP9aQUf/VUVJ/09BRP9PQEL/UDw//1A+
        P/9UODv/VTc6/0w/Qv9NQkP/TD5F/3RgUv/SoZH/17mk/+LMpf/yz6v/9s+r//XPq//00Kv/89Cq/5xn
        Zf+XZWT/k2dm/4tmaP9/ZWX/eWhi/2plXP9oYVj/YlpE/15OPf9YP0D/Uj88/1I/Nf9OPTP/Sjcu/0s8
        MP9IPDH/S0A4/1NCPf9WRT3/TUI5/1JEOv9YQjb/aEo3/6uAaP+8iH7/wp6H/9Cpkf/KoIv/zJ+J/8yp
        jP/PrIz/hGtt/3Jqa/9mZWT/VVlZ/3NhUP93RCL/fDIU/3U2FP96MQr/dh8L/3gYDP9wKgj/ciIJ/2wh
        B/9pIgX/cBwI/2ssB/9tFQb/bRkJ/3MfDP9sHgf/byUL/3QeCf95JgT/ayQB/3AWA/93JAz/ekYj/21a
        SP9cWUz/YVlQ/2RaVP9AQkL/Pj8//zY0N/9nYV7/gUIi/5IpAP+NGAT/lyUA/8VDFP+1Ngv/myUD/4sT
        Bf+cKAH/x0IX/7QvD/+PEwb/fxMH/5EgA//IPRH/siwH/4AmBf99GQT/niEC/8lLHf+oMgn/iA4F/3gJ
        Av9qJQD/ZEYp/zQyNv8iICP/JSYn/xQTE/8PDw//KyYj/2xcWP9/KwD/nzUD/5cxBf+WMQL/gSsM/20f
        Cf+ALQH/fSkD/5UrBP90Ig//WR0I/38XB/+OHQP/ii8D/2IfDP9PFwb/dBME/4kXB/99KwX/SxcH/0kT
        B/9rKAX/cSQH/3QcBP9xIwn/RD85/w8OEP8UExP/HR0d/xUTFf9CQjz/Vz02/4ccAf+QIgT/licG/3so
        BP8TAQj/EgYF/20pBv+WLwX/eCUD/wsEB/8ZCwn/cxwD/5spA/9uJQj/GAUI/x4KB/97JwP/mysE/2UQ
        CP8iCgb/LxEH/2siBP+JMgj/ixYF/3IHAP9NPTH/HiMi/xMSEv8cHBv/FhUT/1NTVf9YNiH/jCQA/48Z
        Cv+QKAX/kC4E/4IpBP+GLAH/lC0F/5IhBP+RLwP/hS4C/5EwA/+RLAL/ih8E/5coBv+SKgX/jikF/5gy
        Av+MJQL/jRwG/4EeBf+EJQX/iQ0E/4gMBv98DAb/fAcA/1onF/8tLzD/EhER/xgYGP8iICH/WFlY/20k
        D/+UJQX/mB0I/6QwCP+YKwP/ljYB/5oyAv+bKAb/rDYQ/5gmA/+dNAH/izED/54wAv+0OQn/mzED/40o
        A/+OGwX/lSUE/64yBv+iKQP/hScH/4EiC/+YJAX/tDIP/6AqBv+EEQT/cSYI/0lGPP8UFRb/GBgY/zcw
        Mv9dV03/cyMB/5kpA/+/Pgj/vEES/6IrA/+VLQL/kC0B/684Cf+vPhT/my4C/5QpA/+VLQT/ozIE/6gu
        Dv+JKAP/hyUE/5IjBP+cLgb/kywK/30hBP+HJQT/lzIG/5EtA/+BKQz/eCQG/3obB/92DwL/V0Ew/yAh
        I/8YGBj/Qz9B/2JZSf95LAD/mDEG/1QUBf8KAgn/PAoF/4MjBf+XKgT/VBED/wIAB/8vDwf/ijAC/580
        A/9UFgX/AAAI/yMHBv+BIwX/lh4F/10TBv8ABAr/IAoH/3onB/+aLgX/XxUH/wYBB/8SCQr/ZBkH/3Uc
        AP9sOy7/Ly4w/xcXF/9LR0b/X1pT/30oA/+iNQH/UiIE/ysRBf9lKAX/mzEU/5ElCv93Hgf/TBoH/2wk
        Bf+dMgX/mywE/4EtBf9gHwb/ciIG/5AiBf+SHgj/iSgG/2kfB/95JAf/ixsF/5YaCv+NHQn/chYI/3Qb
        B/+AJAP/ficD/2lSRf89PDv/ExQU/0ZGRP9rbWv/b0c7/5UyB/+iOAT/mDAB/5orAP+UKwT/iSIC/5Iq
        AP+SLwD/kigA/4ooAP+AHwL/hikB/4osAf+JJQP/eRgC/4IgAf+FHQP/hBcH/4UaBv95FwD/dxgB/3sf
        AP9+HAH/dhwC/4ExGv9tRDb/YWJf/zgxL/8dHh3/Ozw7/0ZERP+NkZL/no2C/5FyX/95XUn/aE4+/2lS
        Q/9xVkr/cFxN/29ZUf9yXVP/c2JU/3RlWv92aWP/dGxn/3tua/99dGn/hnlv/4p8eP+Ce3j/gn16/4qG
        gf+UkIn/n5qU/6iknv+/u7j/tbi4/19hYv8qLCv/Ghsa/yYmJv9DQ0P/HR0d/1BQUP+Jior/mJmW/5+f
        mv+lpJ//qqqm/6anov+rqqj/sa6x/7Gxsf+4ubb/uLm3/7m5uf+5uLj/tra2/7e2t/+xsrT/rbGy/6en
        p/+mpqX/oKSj/6KjpP+Zmpv/lpeY/4mLi/9sbGz/LCsr/x0cHf8iISL/JCQk/z49Pf8fHR3/MjEx/1pa
        Wv9WVlf/V1VW/1xbXP9fYF//Xl5e/1laWf9ZWlr/YWBg/2RjYv9gX17/ZGRj/2RgX/9hX17/YmBf/2Jg
        X/9eXFz/WFRT/1pTUf9WU1D/T05O/05OTv9NTU3/UVFQ/z08PP8WFhb/ODg4/y0tLf8iISH/NjU1/yUk
        JP8nJyf/NDQ0/zg4N/85OTn/PT09/zs6Ov8yMjL/MTAw/y8vL/8sLCz/MDAw/zU1Nf85OTn/OTo6/zs7
        O/83Nzf/OTk5/zU1Nf80NTX/ODg4/zs6Ov85ODj/OTk5/zs7O/8zMzP/HBwc/xwcHP9BQUH/Kioq/xsb
        G/8mKCj/OTw7/0VGRv83Nzf/LS0t/y4uLv8wMDD/MzEy/zY1Nf8zMzP/Ojk5/0ZGRv9YWVn/Wlpb/1hX
        WP9jYmH/Y2Nj/2NkZP9gX1//VFNU/1FQUf9RU1P/UFJR/1NUVP9KSUr/UlFR/0xMTf8xMjP/NTU1/zY2
        Nv8ZGRn/GBgY/xkaGv9YWVn/gYGB/3BwcP9wcXH/dXh3/3l7e/+HiIj/l5eX/6GgoP+xr6//xsbE/9LS
        0f/U09X/zMvK/8vIxP/U09H/1NPS/8/Qz//O0ND/0dLS/9LT0//Q0tH/1dbW/9bV1v/z8/P/5uHZ/3Z0
        cf81NTX/Hh4e/xYWFv8YGBj/FxcX/yAgIP9iYmL/jI2N/5uZmf+ln6D/p6Ki/6WkoP+urKj/s7Gw/7Wz
        tP+2sa3/s6uo/7eurP/BuLH/v7i1/76wqv+sm5T/qJ2a/66npP+zrar/sqyp/7apqf+4r7H/q6ur/7a0
        tP+Id3H/Lioo/xcYGP8YFxf/FxcX/xYWFv8VFRX/FhYW/xQUFP8dHR3/IiEh/yIfIP8fHBz/GxkZ/x4b
        G/8dHBz/GRkZ/xsaGf8cGhn/HRsa/yEeHP8lIiL/Ih8g/xkWF/8aGBj/GhkY/xkZGP8cGxr/HBkY/xoY
        GP8WFhb/EhQT/xITE/8VFxf/FxYW/xcXF/8ZGRj/FxYW/xgYGP8cGxv/Hx8e/x4eHf8eHh7/IyMi/yMk
        I/8iIyL/ISEh/x0cHP8iIiH/JSUk/ygoJ/8rKyv/LS4u/y8wMP8rLCv/Jycn/ycnJ/8lJSX/IyMj/yMj
        I/8iIyP/JCUl/yIiI/8dHR7/FhYX/w4PEP8MDQ7/CQoL/wgKC/8OEBH/DQ8R/xETFv8UFBj/FxgY/xsa
        H/8gICT/IiMl/yMlKP8jJij/KCkr/ywtLv82Njj/PT0//0ZHSP9QUlP/UFJT/0xNT/9ITEf/Q0NF/zs9
        QP8/QEL/Pj4+/zo8O/85Ozv/Oj07/zg6Of8+PDv/SUZB/1VQS/9cVFD/X1dR/56UgP+elIP/i4h+/4eD
        ef+UkXv/lZN8/5WTff+XkYL/m5CJ/5+Vh/+onY3/r6WS/6yflv+qnZX/saSY/8Gynf/Cs53/x7Oi/8u7
        ov/Nt6b/y7ei/86+pf/MuaH/yq6e/8i0nP/JrJr/1cCk/9u8rP/nwrL/99C///zSwP/10K3//dbC//7X
        xf/10bX/8Myx//bUtv/307X/9dK0//fVuP/70rn/8dCp//TOrP/2z6z/9c2s//jNuP/3zrD/8s+l//PN
        p//zzar/9s63//7Nyf/8z7z/882n//jNrf/0zKz/+M6z//jMsv/4zLD/98y2//rOwf/5zcL/9Mey//DH
        qP/yxq//78iy//bJsP/xzLL/98y6//XKu//1yrf/8smn//HKrf/2x7X/9szI//HKtv/zy7r/+s/J//rL
        wv/1yLX/9c2///TLrf/zybT/9Mu6//XJr//1ybb/9cu7//XJuP/4ycD/8cm1//PKrf/tyqf/8Mqq//bK
        sf/vyqb/8sqn/7TfzP/U1MP/ruDO//LNsv+u28n/xdvK//vLs//H1MD/m+bV/9PYzP/5zLr/u9rE/7vc
        z//2y7X/8se2/6rhz/+94cf/78u4/8vb0f/C38r/4NCy/+LPwv/C39H/zNzL//HJt//L1Lr/pOHU//PR
        uP/B1sj/ut3N//jHpv/0y6P/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>